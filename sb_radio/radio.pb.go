// Code generated by protoc-gen-gogo.
// source: radio.proto
// DO NOT EDIT!

/*
	Package shackbus_radio is a generated protocol buffer package.

	It is generated from these files:
		radio.proto

	It has these top-level messages:
		State
		SetState
		Capabilities
		Int32List
		Status
		Vfo
		Channel
		Value
		Function
		Level
		Parameter
		Split
*/
package shackbus_radio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State struct {
	CurrentVfo string   `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo        *Vfo     `protobuf:"bytes,2,opt,name=vfo" json:"vfo,omitempty"`
	Channel    *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	RadioOn    bool     `protobuf:"varint,4,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt        bool     `protobuf:"varint,5,opt,name=ptt,proto3" json:"ptt,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{0} }

func (m *State) GetCurrentVfo() string {
	if m != nil {
		return m.CurrentVfo
	}
	return ""
}

func (m *State) GetVfo() *Vfo {
	if m != nil {
		return m.Vfo
	}
	return nil
}

func (m *State) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *State) GetRadioOn() bool {
	if m != nil {
		return m.RadioOn
	}
	return false
}

func (m *State) GetPtt() bool {
	if m != nil {
		return m.Ptt
	}
	return false
}

type SetState struct {
	CurrentVfo    string   `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo           *Vfo     `protobuf:"bytes,2,opt,name=vfo" json:"vfo,omitempty"`
	Channel       *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	VfoOperations []string `protobuf:"bytes,4,rep,name=vfo_operations,json=vfoOperations" json:"vfo_operations,omitempty"`
	RadioOn       bool     `protobuf:"varint,5,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt           bool     `protobuf:"varint,6,opt,name=ptt,proto3" json:"ptt,omitempty"`
}

func (m *SetState) Reset()                    { *m = SetState{} }
func (m *SetState) String() string            { return proto.CompactTextString(m) }
func (*SetState) ProtoMessage()               {}
func (*SetState) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{1} }

func (m *SetState) GetCurrentVfo() string {
	if m != nil {
		return m.CurrentVfo
	}
	return ""
}

func (m *SetState) GetVfo() *Vfo {
	if m != nil {
		return m.Vfo
	}
	return nil
}

func (m *SetState) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *SetState) GetVfoOperations() []string {
	if m != nil {
		return m.VfoOperations
	}
	return nil
}

func (m *SetState) GetRadioOn() bool {
	if m != nil {
		return m.RadioOn
	}
	return false
}

func (m *SetState) GetPtt() bool {
	if m != nil {
		return m.Ptt
	}
	return false
}

type Capabilities struct {
	Vfos          []string              `protobuf:"bytes,1,rep,name=vfos" json:"vfos,omitempty"`
	Modes         []string              `protobuf:"bytes,2,rep,name=modes" json:"modes,omitempty"`
	VfoOps        []string              `protobuf:"bytes,3,rep,name=vfo_ops,json=vfoOps" json:"vfo_ops,omitempty"`
	GetFunctions  []string              `protobuf:"bytes,4,rep,name=get_functions,json=getFunctions" json:"get_functions,omitempty"`
	SetFunctions  []string              `protobuf:"bytes,5,rep,name=set_functions,json=setFunctions" json:"set_functions,omitempty"`
	GetLevels     []*Value              `protobuf:"bytes,6,rep,name=get_levels,json=getLevels" json:"get_levels,omitempty"`
	SetLevels     []*Value              `protobuf:"bytes,7,rep,name=set_levels,json=setLevels" json:"set_levels,omitempty"`
	GetParameters []*Value              `protobuf:"bytes,8,rep,name=get_parameters,json=getParameters" json:"get_parameters,omitempty"`
	SetParameters []*Value              `protobuf:"bytes,9,rep,name=set_parameters,json=setParameters" json:"set_parameters,omitempty"`
	MaxRit        int32                 `protobuf:"varint,10,opt,name=max_rit,json=maxRit,proto3" json:"max_rit,omitempty"`
	MaxXit        int32                 `protobuf:"varint,11,opt,name=max_xit,json=maxXit,proto3" json:"max_xit,omitempty"`
	MaxIfShift    int32                 `protobuf:"varint,12,opt,name=max_if_shift,json=maxIfShift,proto3" json:"max_if_shift,omitempty"`
	Filters       map[string]*Int32List `protobuf:"bytes,13,rep,name=filters" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	TuningSteps   map[string]*Int32List `protobuf:"bytes,14,rep,name=tuning_steps,json=tuningSteps" json:"tuning_steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Preamps       []int32               `protobuf:"varint,15,rep,packed,name=preamps" json:"preamps,omitempty"`
	Attenuators   []int32               `protobuf:"varint,16,rep,packed,name=attenuators" json:"attenuators,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{2} }

func (m *Capabilities) GetVfos() []string {
	if m != nil {
		return m.Vfos
	}
	return nil
}

func (m *Capabilities) GetModes() []string {
	if m != nil {
		return m.Modes
	}
	return nil
}

func (m *Capabilities) GetVfoOps() []string {
	if m != nil {
		return m.VfoOps
	}
	return nil
}

func (m *Capabilities) GetGetFunctions() []string {
	if m != nil {
		return m.GetFunctions
	}
	return nil
}

func (m *Capabilities) GetSetFunctions() []string {
	if m != nil {
		return m.SetFunctions
	}
	return nil
}

func (m *Capabilities) GetGetLevels() []*Value {
	if m != nil {
		return m.GetLevels
	}
	return nil
}

func (m *Capabilities) GetSetLevels() []*Value {
	if m != nil {
		return m.SetLevels
	}
	return nil
}

func (m *Capabilities) GetGetParameters() []*Value {
	if m != nil {
		return m.GetParameters
	}
	return nil
}

func (m *Capabilities) GetSetParameters() []*Value {
	if m != nil {
		return m.SetParameters
	}
	return nil
}

func (m *Capabilities) GetMaxRit() int32 {
	if m != nil {
		return m.MaxRit
	}
	return 0
}

func (m *Capabilities) GetMaxXit() int32 {
	if m != nil {
		return m.MaxXit
	}
	return 0
}

func (m *Capabilities) GetMaxIfShift() int32 {
	if m != nil {
		return m.MaxIfShift
	}
	return 0
}

func (m *Capabilities) GetFilters() map[string]*Int32List {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Capabilities) GetTuningSteps() map[string]*Int32List {
	if m != nil {
		return m.TuningSteps
	}
	return nil
}

func (m *Capabilities) GetPreamps() []int32 {
	if m != nil {
		return m.Preamps
	}
	return nil
}

func (m *Capabilities) GetAttenuators() []int32 {
	if m != nil {
		return m.Attenuators
	}
	return nil
}

type Int32List struct {
	Value []int32 `protobuf:"varint,14,rep,packed,name=value" json:"value,omitempty"`
}

func (m *Int32List) Reset()                    { *m = Int32List{} }
func (m *Int32List) String() string            { return proto.CompactTextString(m) }
func (*Int32List) ProtoMessage()               {}
func (*Int32List) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{3} }

func (m *Int32List) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Status struct {
	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{4} }

func (m *Status) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type Vfo struct {
	Vfo        string             `protobuf:"bytes,1,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Frequency  float64            `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode       string             `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth    int32              `protobuf:"varint,4,opt,name=pb_width,json=pbWidth,proto3" json:"pb_width,omitempty"`
	Ant        int32              `protobuf:"varint,5,opt,name=ant,proto3" json:"ant,omitempty"`
	Rit        int32              `protobuf:"varint,9,opt,name=rit,proto3" json:"rit,omitempty"`
	Xit        int32              `protobuf:"varint,10,opt,name=xit,proto3" json:"xit,omitempty"`
	Split      *Split             `protobuf:"bytes,11,opt,name=split" json:"split,omitempty"`
	TuningStep int32              `protobuf:"varint,12,opt,name=tuning_step,json=tuningStep,proto3" json:"tuning_step,omitempty"`
	Functions  []string           `protobuf:"bytes,13,rep,name=functions" json:"functions,omitempty"`
	Levels     map[string]float32 `protobuf:"bytes,14,rep,name=levels" json:"levels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Paramters  map[string]float32 `protobuf:"bytes,15,rep,name=paramters" json:"paramters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (m *Vfo) Reset()                    { *m = Vfo{} }
func (m *Vfo) String() string            { return proto.CompactTextString(m) }
func (*Vfo) ProtoMessage()               {}
func (*Vfo) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{5} }

func (m *Vfo) GetVfo() string {
	if m != nil {
		return m.Vfo
	}
	return ""
}

func (m *Vfo) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Vfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Vfo) GetPbWidth() int32 {
	if m != nil {
		return m.PbWidth
	}
	return 0
}

func (m *Vfo) GetAnt() int32 {
	if m != nil {
		return m.Ant
	}
	return 0
}

func (m *Vfo) GetRit() int32 {
	if m != nil {
		return m.Rit
	}
	return 0
}

func (m *Vfo) GetXit() int32 {
	if m != nil {
		return m.Xit
	}
	return 0
}

func (m *Vfo) GetSplit() *Split {
	if m != nil {
		return m.Split
	}
	return nil
}

func (m *Vfo) GetTuningStep() int32 {
	if m != nil {
		return m.TuningStep
	}
	return 0
}

func (m *Vfo) GetFunctions() []string {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *Vfo) GetLevels() map[string]float32 {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *Vfo) GetParamters() map[string]float32 {
	if m != nil {
		return m.Paramters
	}
	return nil
}

type Channel struct {
	Channel int32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{6} }

func (m *Channel) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type Value struct {
	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Step float32 `protobuf:"fixed32,2,opt,name=step,proto3" json:"step,omitempty"`
	Min  float32 `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  float32 `protobuf:"fixed32,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{7} }

func (m *Value) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Value) GetStep() float32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Value) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Value) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type Function struct {
	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Function) Reset()                    { *m = Function{} }
func (m *Function) String() string            { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()               {}
func (*Function) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{8} }

func (m *Function) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *Function) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Level struct {
	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Level) Reset()                    { *m = Level{} }
func (m *Level) String() string            { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()               {}
func (*Level) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{9} }

func (m *Level) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *Level) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Parameter struct {
	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{10} }

func (m *Parameter) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Parameter) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Split struct {
	Enabled   bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Vfo       string  `protobuf:"bytes,2,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Frequency float64 `protobuf:"fixed64,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode      string  `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth   uint32  `protobuf:"varint,5,opt,name=pbWidth,proto3" json:"pbWidth,omitempty"`
}

func (m *Split) Reset()                    { *m = Split{} }
func (m *Split) String() string            { return proto.CompactTextString(m) }
func (*Split) ProtoMessage()               {}
func (*Split) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{11} }

func (m *Split) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Split) GetVfo() string {
	if m != nil {
		return m.Vfo
	}
	return ""
}

func (m *Split) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Split) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Split) GetPbWidth() uint32 {
	if m != nil {
		return m.PbWidth
	}
	return 0
}

func init() {
	proto.RegisterType((*State)(nil), "shackbus.radio.State")
	proto.RegisterType((*SetState)(nil), "shackbus.radio.SetState")
	proto.RegisterType((*Capabilities)(nil), "shackbus.radio.Capabilities")
	proto.RegisterType((*Int32List)(nil), "shackbus.radio.Int32List")
	proto.RegisterType((*Status)(nil), "shackbus.radio.Status")
	proto.RegisterType((*Vfo)(nil), "shackbus.radio.Vfo")
	proto.RegisterType((*Channel)(nil), "shackbus.radio.Channel")
	proto.RegisterType((*Value)(nil), "shackbus.radio.Value")
	proto.RegisterType((*Function)(nil), "shackbus.radio.Function")
	proto.RegisterType((*Level)(nil), "shackbus.radio.Level")
	proto.RegisterType((*Parameter)(nil), "shackbus.radio.Parameter")
	proto.RegisterType((*Split)(nil), "shackbus.radio.Split")
}
func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentVfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.CurrentVfo)))
		i += copy(dAtA[i:], m.CurrentVfo)
	}
	if m.Vfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Vfo.Size()))
		n1, err := m.Vfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Channel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel.Size()))
		n2, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RadioOn {
		dAtA[i] = 0x20
		i++
		if m.RadioOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptt {
		dAtA[i] = 0x28
		i++
		if m.Ptt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentVfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.CurrentVfo)))
		i += copy(dAtA[i:], m.CurrentVfo)
	}
	if m.Vfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Vfo.Size()))
		n3, err := m.Vfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Channel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel.Size()))
		n4, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.VfoOperations) > 0 {
		for _, s := range m.VfoOperations {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RadioOn {
		dAtA[i] = 0x28
		i++
		if m.RadioOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptt {
		dAtA[i] = 0x30
		i++
		if m.Ptt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Capabilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vfos) > 0 {
		for _, s := range m.Vfos {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Modes) > 0 {
		for _, s := range m.Modes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VfoOps) > 0 {
		for _, s := range m.VfoOps {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GetFunctions) > 0 {
		for _, s := range m.GetFunctions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SetFunctions) > 0 {
		for _, s := range m.SetFunctions {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GetLevels) > 0 {
		for _, msg := range m.GetLevels {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SetLevels) > 0 {
		for _, msg := range m.SetLevels {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GetParameters) > 0 {
		for _, msg := range m.GetParameters {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SetParameters) > 0 {
		for _, msg := range m.SetParameters {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxRit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxRit))
	}
	if m.MaxXit != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxXit))
	}
	if m.MaxIfShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxIfShift))
	}
	if len(m.Filters) > 0 {
		for k, _ := range m.Filters {
			dAtA[i] = 0x6a
			i++
			v := m.Filters[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRadio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + msgSize
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRadio(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if len(m.TuningSteps) > 0 {
		for k, _ := range m.TuningSteps {
			dAtA[i] = 0x72
			i++
			v := m.TuningSteps[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRadio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + msgSize
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRadio(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.Preamps) > 0 {
		dAtA8 := make([]byte, len(m.Preamps)*10)
		var j7 int
		for _, num1 := range m.Preamps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.Attenuators) > 0 {
		dAtA10 := make([]byte, len(m.Attenuators)*10)
		var j9 int
		for _, num1 := range m.Attenuators {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *Int32List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int32List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA12 := make([]byte, len(m.Value)*10)
		var j11 int
		for _, num1 := range m.Value {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Online {
		dAtA[i] = 0x8
		i++
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Vfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Vfo)))
		i += copy(dAtA[i:], m.Vfo)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Radio(dAtA, i, uint64(math.Float64bits(float64(m.Frequency))))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.PbWidth != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PbWidth))
	}
	if m.Ant != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Ant))
	}
	if m.Rit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Rit))
	}
	if m.Xit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Xit))
	}
	if m.Split != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Split.Size()))
		n13, err := m.Split.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.TuningStep != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.TuningStep))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Levels) > 0 {
		for k, _ := range m.Levels {
			dAtA[i] = 0x72
			i++
			v := m.Levels[k]
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if len(m.Paramters) > 0 {
		for k, _ := range m.Paramters {
			dAtA[i] = 0x7a
			i++
			v := m.Paramters[k]
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Step != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Step))))
	}
	if m.Min != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Min))))
	}
	if m.Max != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Max))))
	}
	return i, nil
}

func (m *Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Function) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Func)))
		i += copy(dAtA[i:], m.Func)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Func)))
		i += copy(dAtA[i:], m.Func)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Split) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Split) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Vfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Vfo)))
		i += copy(dAtA[i:], m.Vfo)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Radio(dAtA, i, uint64(math.Float64bits(float64(m.Frequency))))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.PbWidth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PbWidth))
	}
	return i, nil
}

func encodeFixed64Radio(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Radio(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRadio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *State) Size() (n int) {
	var l int
	_ = l
	l = len(m.CurrentVfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Vfo != nil {
		l = m.Vfo.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.RadioOn {
		n += 2
	}
	if m.Ptt {
		n += 2
	}
	return n
}

func (m *SetState) Size() (n int) {
	var l int
	_ = l
	l = len(m.CurrentVfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Vfo != nil {
		l = m.Vfo.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if len(m.VfoOperations) > 0 {
		for _, s := range m.VfoOperations {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if m.RadioOn {
		n += 2
	}
	if m.Ptt {
		n += 2
	}
	return n
}

func (m *Capabilities) Size() (n int) {
	var l int
	_ = l
	if len(m.Vfos) > 0 {
		for _, s := range m.Vfos {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.Modes) > 0 {
		for _, s := range m.Modes {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.VfoOps) > 0 {
		for _, s := range m.VfoOps {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetFunctions) > 0 {
		for _, s := range m.GetFunctions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetFunctions) > 0 {
		for _, s := range m.SetFunctions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetLevels) > 0 {
		for _, e := range m.GetLevels {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetLevels) > 0 {
		for _, e := range m.SetLevels {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetParameters) > 0 {
		for _, e := range m.GetParameters {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetParameters) > 0 {
		for _, e := range m.SetParameters {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if m.MaxRit != 0 {
		n += 1 + sovRadio(uint64(m.MaxRit))
	}
	if m.MaxXit != 0 {
		n += 1 + sovRadio(uint64(m.MaxXit))
	}
	if m.MaxIfShift != 0 {
		n += 1 + sovRadio(uint64(m.MaxIfShift))
	}
	if len(m.Filters) > 0 {
		for k, v := range m.Filters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRadio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.TuningSteps) > 0 {
		for k, v := range m.TuningSteps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRadio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.Preamps) > 0 {
		l = 0
		for _, e := range m.Preamps {
			l += sovRadio(uint64(e))
		}
		n += 1 + sovRadio(uint64(l)) + l
	}
	if len(m.Attenuators) > 0 {
		l = 0
		for _, e := range m.Attenuators {
			l += sovRadio(uint64(e))
		}
		n += 2 + sovRadio(uint64(l)) + l
	}
	return n
}

func (m *Int32List) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovRadio(uint64(e))
		}
		n += 1 + sovRadio(uint64(l)) + l
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Online {
		n += 2
	}
	return n
}

func (m *Vfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Vfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Frequency != 0 {
		n += 9
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.PbWidth != 0 {
		n += 1 + sovRadio(uint64(m.PbWidth))
	}
	if m.Ant != 0 {
		n += 1 + sovRadio(uint64(m.Ant))
	}
	if m.Rit != 0 {
		n += 1 + sovRadio(uint64(m.Rit))
	}
	if m.Xit != 0 {
		n += 1 + sovRadio(uint64(m.Xit))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.TuningStep != 0 {
		n += 1 + sovRadio(uint64(m.TuningStep))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for k, v := range m.Levels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.Paramters) > 0 {
		for k, v := range m.Paramters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovRadio(uint64(m.Channel))
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Step != 0 {
		n += 5
	}
	if m.Min != 0 {
		n += 5
	}
	if m.Max != 0 {
		n += 5
	}
	return n
}

func (m *Function) Size() (n int) {
	var l int
	_ = l
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Level) Size() (n int) {
	var l int
	_ = l
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Split) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Vfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Frequency != 0 {
		n += 9
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.PbWidth != 0 {
		n += 1 + sovRadio(uint64(m.PbWidth))
	}
	return n
}

func sovRadio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRadio(x uint64) (n int) {
	return sovRadio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vfo == nil {
				m.Vfo = &Vfo{}
			}
			if err := m.Vfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RadioOn = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ptt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vfo == nil {
				m.Vfo = &Vfo{}
			}
			if err := m.Vfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VfoOperations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VfoOperations = append(m.VfoOperations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RadioOn = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ptt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vfos = append(m.Vfos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modes = append(m.Modes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VfoOps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VfoOps = append(m.VfoOps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetFunctions = append(m.GetFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetFunctions = append(m.SetFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetLevels = append(m.GetLevels, &Value{})
			if err := m.GetLevels[len(m.GetLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetLevels = append(m.SetLevels, &Value{})
			if err := m.SetLevels[len(m.SetLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetParameters = append(m.GetParameters, &Value{})
			if err := m.GetParameters[len(m.GetParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetParameters = append(m.SetParameters, &Value{})
			if err := m.SetParameters[len(m.SetParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRit", wireType)
			}
			m.MaxRit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxXit", wireType)
			}
			m.MaxXit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxXit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIfShift", wireType)
			}
			m.MaxIfShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIfShift |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Filters == nil {
				m.Filters = make(map[string]*Int32List)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Int32List{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Filters[mapkey] = mapvalue
			} else {
				var mapvalue *Int32List
				m.Filters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningSteps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TuningSteps == nil {
				m.TuningSteps = make(map[string]*Int32List)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Int32List{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.TuningSteps[mapkey] = mapvalue
			} else {
				var mapvalue *Int32List
				m.TuningSteps[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Preamps = append(m.Preamps, v)
				}
			} else if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Preamps = append(m.Preamps, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Preamps", wireType)
			}
		case 16:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attenuators = append(m.Attenuators, v)
				}
			} else if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attenuators = append(m.Attenuators, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attenuators", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int32List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int32List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int32List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Frequency = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbWidth", wireType)
			}
			m.PbWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ant", wireType)
			}
			m.Ant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ant |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rit", wireType)
			}
			m.Rit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xit", wireType)
			}
			m.Xit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &Split{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningStep", wireType)
			}
			m.TuningStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TuningStep |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Levels == nil {
				m.Levels = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(dAtA[iNdEx-4])
				mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
				mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
				mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.Levels[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.Levels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paramters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Paramters == nil {
				m.Paramters = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(dAtA[iNdEx-4])
				mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
				mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
				mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.Paramters[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.Paramters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Step = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Min = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Max = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Function) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Function: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Function: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Split) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Split: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Split: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Frequency = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbWidth", wireType)
			}
			m.PbWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbWidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRadio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRadio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRadio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRadio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRadio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("radio.proto", fileDescriptorRadio) }

var fileDescriptorRadio = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xe7, 0x7c, 0x39, 0xdb, 0x37, 0xfe, 0x53, 0x6b, 0x29, 0xe4, 0x1a, 0xa1, 0xf4, 0x70, 0x55,
	0xc9, 0x08, 0x61, 0xd4, 0xb4, 0x52, 0x01, 0xf5, 0x01, 0x11, 0x51, 0xa9, 0x52, 0xa5, 0x46, 0x67,
	0x28, 0xf0, 0x64, 0xad, 0x9d, 0xbd, 0x64, 0xd5, 0xf3, 0xde, 0x71, 0xbb, 0x36, 0xce, 0x13, 0x5f,
	0x83, 0x6f, 0xc1, 0xd7, 0xe0, 0x91, 0x57, 0x24, 0x1e, 0x50, 0xf8, 0x16, 0x3c, 0xa1, 0x99, 0xbd,
	0x3b, 0x9f, 0x53, 0x27, 0x52, 0x24, 0x24, 0xde, 0x66, 0x7f, 0x33, 0xbf, 0xc9, 0xec, 0xde, 0xef,
	0x37, 0x0e, 0x74, 0x72, 0x7e, 0x2a, 0xd3, 0x71, 0x96, 0xa7, 0x26, 0x65, 0x7d, 0x7d, 0xce, 0xe7,
	0x6f, 0x66, 0x4b, 0x3d, 0x26, 0x74, 0xf8, 0xab, 0x03, 0xde, 0xc4, 0x70, 0x23, 0xd8, 0x7d, 0xe8,
	0xcc, 0x97, 0x79, 0x2e, 0x94, 0x99, 0xae, 0xe2, 0x34, 0x70, 0x42, 0x67, 0xe4, 0x47, 0x50, 0x40,
	0xaf, 0xe3, 0x94, 0x3d, 0x04, 0x17, 0x13, 0x8d, 0xd0, 0x19, 0x75, 0x8e, 0xde, 0x1d, 0x6f, 0x37,
	0x1a, 0xbf, 0x8e, 0xd3, 0x08, 0xf3, 0xec, 0x11, 0xb4, 0xe6, 0xe7, 0x5c, 0x29, 0x91, 0x04, 0x2e,
	0x95, 0xee, 0x5f, 0x2d, 0x3d, 0xb6, 0xe9, 0xa8, 0xac, 0x63, 0xf7, 0xa0, 0x4d, 0x99, 0x69, 0xaa,
	0x82, 0xbd, 0xd0, 0x19, 0xb5, 0xa3, 0x16, 0x9d, 0x5f, 0x29, 0x36, 0x00, 0x37, 0x33, 0x26, 0xf0,
	0x08, 0xc5, 0x70, 0xf8, 0x87, 0x03, 0xed, 0x89, 0x30, 0xff, 0xfb, 0xd0, 0x0f, 0xa1, 0xbf, 0x8a,
	0xd3, 0x69, 0x9a, 0x89, 0x9c, 0x1b, 0x99, 0x2a, 0x1d, 0xec, 0x85, 0xee, 0xc8, 0x8f, 0x7a, 0xab,
	0x38, 0x7d, 0x55, 0x81, 0x5b, 0x77, 0xf3, 0x76, 0xde, 0xad, 0xb9, 0xb9, 0xdb, 0x9f, 0x4d, 0xe8,
	0x1e, 0xf3, 0x8c, 0xcf, 0x64, 0x22, 0x8d, 0x14, 0x9a, 0x31, 0xd8, 0x5b, 0xc5, 0xa9, 0x0e, 0x1c,
	0x6a, 0x4d, 0x31, 0xbb, 0x0b, 0xde, 0x22, 0x3d, 0x15, 0x3a, 0x68, 0x10, 0x68, 0x0f, 0x6c, 0x1f,
	0x5a, 0x76, 0x1c, 0x1d, 0xb8, 0x84, 0x37, 0x69, 0x0e, 0xcd, 0x1e, 0x40, 0xef, 0x4c, 0x98, 0x69,
	0xbc, 0x54, 0xf3, 0xfa, 0x98, 0xdd, 0x33, 0x61, 0x9e, 0x97, 0x18, 0x16, 0xe9, 0xad, 0x22, 0xcf,
	0x16, 0xe9, 0x7a, 0xd1, 0x13, 0x00, 0xec, 0x94, 0x88, 0x95, 0x48, 0x74, 0xd0, 0x0c, 0xdd, 0x51,
	0xe7, 0xe8, 0xbd, 0xb7, 0x9e, 0x94, 0x27, 0x4b, 0x11, 0xf9, 0x67, 0xc2, 0xbc, 0xa4, 0x3a, 0x64,
	0xe9, 0x0d, 0xab, 0x75, 0x23, 0x4b, 0x57, 0xac, 0x67, 0xd0, 0xc7, 0xbf, 0x95, 0xf1, 0x9c, 0x2f,
	0x84, 0x11, 0xb9, 0x0e, 0xda, 0x37, 0x31, 0xf1, 0x8a, 0x27, 0x55, 0x2d, 0xb2, 0xf5, 0x36, 0xdb,
	0xbf, 0x91, 0xad, 0xb7, 0xd8, 0xfb, 0xd0, 0x5a, 0xf0, 0xf5, 0x34, 0x97, 0x26, 0x80, 0xd0, 0x19,
	0x79, 0x51, 0x73, 0xc1, 0xd7, 0x91, 0x34, 0x65, 0x62, 0x2d, 0x4d, 0xd0, 0xa9, 0x12, 0xdf, 0x4b,
	0xc3, 0x42, 0xe8, 0x62, 0x42, 0xc6, 0x53, 0x7d, 0x2e, 0x63, 0x13, 0x74, 0x29, 0x0b, 0x0b, 0xbe,
	0x7e, 0x11, 0x4f, 0x10, 0x61, 0xc7, 0xd0, 0x8a, 0x65, 0x42, 0xa3, 0xf4, 0x68, 0x94, 0x8f, 0xde,
	0x12, 0x58, 0xed, 0xbb, 0x8f, 0x9f, 0xdb, 0xda, 0xaf, 0x95, 0xc9, 0x2f, 0xa2, 0x92, 0xc9, 0x4e,
	0xa0, 0x6b, 0x96, 0x4a, 0xaa, 0xb3, 0xa9, 0x36, 0x22, 0xd3, 0x41, 0x9f, 0x3a, 0x7d, 0x72, 0x63,
	0xa7, 0x6f, 0x88, 0x30, 0xc1, 0x7a, 0xdb, 0xad, 0x63, 0x36, 0x08, 0x0b, 0xa0, 0x95, 0xe5, 0x82,
	0x2f, 0x32, 0x1d, 0xdc, 0x09, 0xdd, 0x91, 0x17, 0x95, 0x47, 0x16, 0x42, 0x87, 0x1b, 0x23, 0xd4,
	0x92, 0x9b, 0x34, 0xd7, 0xc1, 0x80, 0xb2, 0x75, 0xe8, 0xe0, 0x5b, 0xe8, 0xd6, 0xc7, 0x44, 0x39,
	0xbf, 0x11, 0x17, 0x85, 0x07, 0x31, 0x64, 0x9f, 0x82, 0xb7, 0xc2, 0x07, 0x2e, 0xec, 0x77, 0xef,
	0xea, 0xa0, 0x2f, 0x94, 0x79, 0x7c, 0xf4, 0x52, 0x6a, 0x13, 0xd9, 0xba, 0x2f, 0x1a, 0x9f, 0x39,
	0x07, 0x3f, 0xc0, 0xe0, 0xea, 0xcc, 0xff, 0x51, 0xeb, 0xe1, 0x87, 0xe0, 0x57, 0x38, 0xda, 0xc8,
	0x76, 0xe8, 0xd3, 0xd5, 0xec, 0x61, 0x18, 0x42, 0x13, 0x37, 0xcb, 0x52, 0xb3, 0xf7, 0xa1, 0x99,
	0xaa, 0x44, 0x2a, 0x41, 0x7f, 0xb6, 0x1d, 0x15, 0xa7, 0xe1, 0x3f, 0x2e, 0xb8, 0xb8, 0x59, 0x06,
	0x76, 0xb3, 0x14, 0x33, 0xe1, 0x12, 0xf9, 0x00, 0xfc, 0x38, 0x17, 0x3f, 0x2e, 0x85, 0x9a, 0x5f,
	0xd0, 0x5c, 0x4e, 0xb4, 0x01, 0xd0, 0xca, 0xe8, 0x54, 0xda, 0x2f, 0x7e, 0x44, 0x31, 0x2e, 0x87,
	0x6c, 0x36, 0xfd, 0x49, 0x9e, 0x9a, 0x73, 0x5a, 0x7c, 0xf8, 0xfe, 0xb3, 0xef, 0xf0, 0x88, 0xed,
	0xb9, 0xb2, 0x8b, 0xcf, 0x8b, 0x30, 0x44, 0x04, 0x25, 0xe9, 0x5b, 0x24, 0x97, 0x84, 0xac, 0x2b,
	0x91, 0x62, 0xc8, 0x3e, 0x06, 0x4f, 0x67, 0x49, 0xa1, 0xcf, 0x1d, 0x7a, 0x9f, 0x60, 0x32, 0xb2,
	0x35, 0xb8, 0x3c, 0x6b, 0x72, 0x2a, 0x45, 0xbb, 0x91, 0x07, 0x5d, 0xa8, 0xda, 0x08, 0x3d, 0xda,
	0x08, 0x1b, 0x80, 0x3d, 0x85, 0x66, 0x61, 0x6a, 0xab, 0xc3, 0xfb, 0x3b, 0xb6, 0xeb, 0xd8, 0xda,
	0xd9, 0x2a, 0xaf, 0x28, 0x67, 0x5f, 0x82, 0x4f, 0xce, 0x24, 0x37, 0xdc, 0x21, 0xee, 0x70, 0x17,
	0xf7, 0xa4, 0x2c, 0xb2, 0xf4, 0x0d, 0xe9, 0xe0, 0x73, 0xe8, 0xd4, 0x1a, 0xef, 0x90, 0xc7, 0xdd,
	0xba, 0x3c, 0x1a, 0x75, 0x79, 0x3d, 0x83, 0xfe, 0x76, 0xdf, 0xdb, 0xb0, 0x87, 0x0f, 0xa0, 0x55,
	0xfc, 0x10, 0xa0, 0x75, 0xca, 0x9f, 0x0c, 0xc7, 0x7e, 0xba, 0xe2, 0x38, 0x9c, 0x80, 0x47, 0x7b,
	0x05, 0x3f, 0xb9, 0xe2, 0x0b, 0x51, 0xb4, 0xa6, 0x18, 0x31, 0x7a, 0x6d, 0xdb, 0x9a, 0x62, 0x9c,
	0x60, 0x21, 0x15, 0x29, 0xa3, 0x11, 0x61, 0x48, 0x08, 0x5f, 0x93, 0x26, 0x10, 0xe1, 0xeb, 0xe1,
	0x13, 0x68, 0x97, 0x9b, 0x18, 0x7b, 0xe0, 0x67, 0x28, 0xfb, 0x62, 0xbc, 0x3d, 0x73, 0xbb, 0x94,
	0xf3, 0x23, 0xf0, 0xe8, 0xa1, 0x6e, 0x41, 0x79, 0x0a, 0x7e, 0xb5, 0x0b, 0xb1, 0x84, 0x5e, 0xbd,
	0xe0, 0xd9, 0xc3, 0x35, 0xc4, 0x9f, 0xc1, 0x23, 0x79, 0xe1, 0xcb, 0x08, 0xc5, 0x67, 0x89, 0x38,
	0x2d, 0xac, 0x53, 0x1e, 0x4b, 0xcf, 0x34, 0xae, 0xf1, 0x8c, 0x7b, 0x9d, 0x67, 0xf6, 0x6a, 0x9e,
	0xc1, 0x95, 0x65, 0x3d, 0x42, 0xe6, 0xe8, 0x55, 0x96, 0xf9, 0x6a, 0xf0, 0xdb, 0xe5, 0xa1, 0xf3,
	0xfb, 0xe5, 0xa1, 0xf3, 0xd7, 0xe5, 0xa1, 0xf3, 0xcb, 0xdf, 0x87, 0xef, 0xcc, 0x9a, 0xf4, 0x4f,
	0xcf, 0xe3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x77, 0x2a, 0xa2, 0x03, 0x09, 0x00, 0x00,
}
